// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for KeyVaultClient.
    /// </summary>
    public static partial class KeyVaultClientExtensions
    {
            /// <summary>
            /// Creates a new, named, key in the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='kty'>
            /// The type of key to create. For valid key types, see WebKeyTypes.
            /// </param>
            /// <param name='keySize'>
            /// Size of the key
            /// </param>
            /// <param name='keyOps'>
            /// </param>
            /// <param name='keyAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            public static KeyBundle CreateKey(this IKeyVaultClient operations, string vault, string keyName, string kty, int? keySize = default(int?), IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).CreateKeyAsync(vault, keyName, kty, keySize, keyOps, keyAttributes, tags), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new, named, key in the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='kty'>
            /// The type of key to create. For valid key types, see WebKeyTypes.
            /// </param>
            /// <param name='keySize'>
            /// Size of the key
            /// </param>
            /// <param name='keyOps'>
            /// </param>
            /// <param name='keyAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> CreateKeyAsync(this IKeyVaultClient operations, string vault, string keyName, string kty, int? keySize = default(int?), IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateKeyWithHttpMessagesAsync(vault, keyName, kty, keySize, keyOps, keyAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imports a key into the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='hsm'>
            /// Whether to import as a hardware key (HSM) or software key
            /// </param>
            /// <param name='key'>
            /// The Json web key
            /// </param>
            /// <param name='keyAttributes'>
            /// The key management attributes
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            public static KeyBundle ImportKey(this IKeyVaultClient operations, string vault, string keyName, bool? hsm = default(bool?), JsonWebKey key = default(JsonWebKey), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).ImportKeyAsync(vault, keyName, hsm, key, keyAttributes, tags), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Imports a key into the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='hsm'>
            /// Whether to import as a hardware key (HSM) or software key
            /// </param>
            /// <param name='key'>
            /// The Json web key
            /// </param>
            /// <param name='keyAttributes'>
            /// The key management attributes
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> ImportKeyAsync(this IKeyVaultClient operations, string vault, string keyName, bool? hsm = default(bool?), JsonWebKey key = default(JsonWebKey), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportKeyWithHttpMessagesAsync(vault, keyName, hsm, key, keyAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            public static KeyBundle DeleteKey(this IKeyVaultClient operations, string vault, string keyName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).DeleteKeyAsync(vault, keyName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> DeleteKeyAsync(this IKeyVaultClient operations, string vault, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteKeyWithHttpMessagesAsync(vault, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Key Attributes associated with the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='keyOps'>
            /// Json web key operations. For more information on possible key operations,
            /// see JsonWebKeyOperation.
            /// </param>
            /// <param name='keyAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            public static KeyBundle UpdateKey(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).UpdateKeyAsync(vault, keyName, keyVersion, keyOps, keyAttributes, tags), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Key Attributes associated with the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='keyOps'>
            /// Json web key operations. For more information on possible key operations,
            /// see JsonWebKeyOperation.
            /// </param>
            /// <param name='keyAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> UpdateKeyAsync(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateKeyWithHttpMessagesAsync(vault, keyName, keyVersion, keyOps, keyAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the public portion of a key plus its attributes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            public static KeyBundle GetKey(this IKeyVaultClient operations, string vault, string keyName, string keyVersion)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetKeyAsync(vault, keyName, keyVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the public portion of a key plus its attributes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> GetKeyAsync(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyWithHttpMessagesAsync(vault, keyName, keyVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            public static IPage<KeyItem> GetKeyVersions(this IKeyVaultClient operations, string vault, string keyName, int? maxresults = default(int?))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetKeyVersionsAsync(vault, keyName, maxresults), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the versions of the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeyVersionsAsync(this IKeyVaultClient operations, string vault, string keyName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyVersionsWithHttpMessagesAsync(vault, keyName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            public static IPage<KeyItem> GetKeys(this IKeyVaultClient operations, string vault, int? maxresults = default(int?))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetKeysAsync(vault, maxresults), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List keys in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeysAsync(this IKeyVaultClient operations, string vault, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysWithHttpMessagesAsync(vault, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requests that a backup of the specified key be downloaded to the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            public static BackupKeyResult BackupKey(this IKeyVaultClient operations, string vault, string keyName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).BackupKeyAsync(vault, keyName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requests that a backup of the specified key be downloaded to the client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupKeyResult> BackupKeyAsync(this IKeyVaultClient operations, string vault, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupKeyWithHttpMessagesAsync(vault, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores the backup key in to a vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyBundleBackup'>
            /// the backup blob associated with a key bundle
            /// </param>
            public static KeyBundle RestoreKey(this IKeyVaultClient operations, string vault, byte[] keyBundleBackup)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).RestoreKeyAsync(vault, keyBundleBackup), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores the backup key in to a vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyBundleBackup'>
            /// the backup blob associated with a key bundle
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> RestoreKeyAsync(this IKeyVaultClient operations, string vault, byte[] keyBundleBackup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreKeyWithHttpMessagesAsync(vault, keyBundleBackup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Encrypts a single block of data. The amount of data that may be encrypted
            /// is determined
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            public static KeyOperationResult Encrypt(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).EncryptAsync(vault, keyName, keyVersion, algorithm, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Encrypts a single block of data. The amount of data that may be encrypted
            /// is determined
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> EncryptAsync(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EncryptWithHttpMessagesAsync(vault, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Decrypts a single block of encrypted data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            public static KeyOperationResult Decrypt(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).DecryptAsync(vault, keyName, keyVersion, algorithm, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Decrypts a single block of encrypted data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> DecryptAsync(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DecryptWithHttpMessagesAsync(vault, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a signature from a digest using the specified key in the vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            public static KeyOperationResult Sign(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).SignAsync(vault, keyName, keyVersion, algorithm, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a signature from a digest using the specified key in the vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> SignAsync(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SignWithHttpMessagesAsync(vault, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verifies a signature using the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// The signing/verification algorithm. For more information on possible
            /// algorithm types, see JsonWebKeySignatureAlgorithm.
            /// </param>
            /// <param name='digest'>
            /// The digest used for signing
            /// </param>
            /// <param name='signature'>
            /// The signature to be verified
            /// </param>
            public static KeyVerifyResult Verify(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] digest, byte[] signature)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).VerifyAsync(vault, keyName, keyVersion, algorithm, digest, signature), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verifies a signature using the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// The signing/verification algorithm. For more information on possible
            /// algorithm types, see JsonWebKeySignatureAlgorithm.
            /// </param>
            /// <param name='digest'>
            /// The digest used for signing
            /// </param>
            /// <param name='signature'>
            /// The signature to be verified
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyVerifyResult> VerifyAsync(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] digest, byte[] signature, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyWithHttpMessagesAsync(vault, keyName, keyVersion, algorithm, digest, signature, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Wraps a symmetric key using the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            public static KeyOperationResult WrapKey(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).WrapKeyAsync(vault, keyName, keyVersion, algorithm, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Wraps a symmetric key using the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> WrapKeyAsync(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WrapKeyWithHttpMessagesAsync(vault, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unwraps a symmetric key using the specified key in the vault that has
            /// initially been used for wrapping the key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            public static KeyOperationResult UnwrapKey(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).UnwrapKeyAsync(vault, keyName, keyVersion, algorithm, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unwraps a symmetric key using the specified key in the vault that has
            /// initially been used for wrapping the key.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> UnwrapKeyAsync(this IKeyVaultClient operations, string vault, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnwrapKeyWithHttpMessagesAsync(vault, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets a secret in the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='value'>
            /// The value of the secret
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='contentType'>
            /// Type of the secret value such as a password
            /// </param>
            /// <param name='secretAttributes'>
            /// </param>
            public static SecretBundle SetSecret(this IKeyVaultClient operations, string vault, string secretName, string value, IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).SetSecretAsync(vault, secretName, value, tags, contentType, secretAttributes), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets a secret in the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='value'>
            /// The value of the secret
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='contentType'>
            /// Type of the secret value such as a password
            /// </param>
            /// <param name='secretAttributes'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> SetSecretAsync(this IKeyVaultClient operations, string vault, string secretName, string value, IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSecretWithHttpMessagesAsync(vault, secretName, value, tags, contentType, secretAttributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a secret from the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            public static SecretBundle DeleteSecret(this IKeyVaultClient operations, string vault, string secretName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).DeleteSecretAsync(vault, secretName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a secret from the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> DeleteSecretAsync(this IKeyVaultClient operations, string vault, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSecretWithHttpMessagesAsync(vault, secretName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the attributes associated with the specified secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='secretVersion'>
            /// The version of the secret
            /// </param>
            /// <param name='contentType'>
            /// Type of the secret value such as a password
            /// </param>
            /// <param name='secretAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            public static SecretBundle UpdateSecret(this IKeyVaultClient operations, string vault, string secretName, string secretVersion, string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).UpdateSecretAsync(vault, secretName, secretVersion, contentType, secretAttributes, tags), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the attributes associated with the specified secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='secretVersion'>
            /// The version of the secret
            /// </param>
            /// <param name='contentType'>
            /// Type of the secret value such as a password
            /// </param>
            /// <param name='secretAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> UpdateSecretAsync(this IKeyVaultClient operations, string vault, string secretName, string secretVersion, string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSecretWithHttpMessagesAsync(vault, secretName, secretVersion, contentType, secretAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='secretVersion'>
            /// The version of the secret
            /// </param>
            public static SecretBundle GetSecret(this IKeyVaultClient operations, string vault, string secretName, string secretVersion)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetSecretAsync(vault, secretName, secretVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a secret.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='secretVersion'>
            /// The version of the secret
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> GetSecretAsync(this IKeyVaultClient operations, string vault, string secretName, string secretVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretWithHttpMessagesAsync(vault, secretName, secretVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List secrets in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of secrets to return.
            /// </param>
            public static IPage<SecretItem> GetSecrets(this IKeyVaultClient operations, string vault, int? maxresults = default(int?))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetSecretsAsync(vault, maxresults), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List secrets in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of secrets to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretsAsync(this IKeyVaultClient operations, string vault, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretsWithHttpMessagesAsync(vault, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of the specified secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            public static IPage<SecretItem> GetSecretVersions(this IKeyVaultClient operations, string vault, string secretName, int? maxresults = default(int?))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetSecretVersionsAsync(vault, secretName, maxresults), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the versions of the specified secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret in the given vault
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretVersionsAsync(this IKeyVaultClient operations, string vault, string secretName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretVersionsWithHttpMessagesAsync(vault, secretName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificates in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            public static IPage<CertificateItem> GetCertificates(this IKeyVaultClient operations, string vault, int? maxresults = default(int?))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificatesAsync(vault, maxresults), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List certificates in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificatesAsync(this IKeyVaultClient operations, string vault, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesWithHttpMessagesAsync(vault, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a certificate from the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault
            /// </param>
            public static CertificateBundle DeleteCertificate(this IKeyVaultClient operations, string vault, string certificateName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).DeleteCertificateAsync(vault, certificateName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a certificate from the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> DeleteCertificateAsync(this IKeyVaultClient operations, string vault, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateWithHttpMessagesAsync(vault, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the certificate contacts for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='contacts'>
            /// Contacts.
            /// </param>
            public static Contacts SetCertificateContacts(this IKeyVaultClient operations, string vault, Contacts contacts)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).SetCertificateContactsAsync(vault, contacts), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the certificate contacts for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='contacts'>
            /// Contacts.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> SetCertificateContactsAsync(this IKeyVaultClient operations, string vault, Contacts contacts, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCertificateContactsWithHttpMessagesAsync(vault, contacts, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the certificate contacts for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            public static Contacts GetCertificateContacts(this IKeyVaultClient operations, string vault)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificateContactsAsync(vault), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the certificate contacts for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> GetCertificateContactsAsync(this IKeyVaultClient operations, string vault, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateContactsWithHttpMessagesAsync(vault, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the certificate contacts for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            public static Contacts DeleteCertificateContacts(this IKeyVaultClient operations, string vault)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).DeleteCertificateContactsAsync(vault), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the certificate contacts for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> DeleteCertificateContactsAsync(this IKeyVaultClient operations, string vault, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateContactsWithHttpMessagesAsync(vault, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificate issuers for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            public static IPage<CertificateIssuerItem> GetCertificateIssuers(this IKeyVaultClient operations, string vault, int? maxresults = default(int?))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificateIssuersAsync(vault, maxresults), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List certificate issuers for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateIssuerItem>> GetCertificateIssuersAsync(this IKeyVaultClient operations, string vault, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuersWithHttpMessagesAsync(vault, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the certificate contacts for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='issuer'>
            /// The issuer bundle.
            /// </param>
            public static IssuerBundle SetCertificateIssuer(this IKeyVaultClient operations, string vault, string issuerName, IssuerBundle issuer)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).SetCertificateIssuerAsync(vault, issuerName, issuer), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the certificate contacts for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='issuer'>
            /// The issuer bundle.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> SetCertificateIssuerAsync(this IKeyVaultClient operations, string vault, string issuerName, IssuerBundle issuer, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCertificateIssuerWithHttpMessagesAsync(vault, issuerName, issuer, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='issuer'>
            /// The issuer bundle.
            /// </param>
            public static IssuerBundle UpdateCertificateIssuer(this IKeyVaultClient operations, string vault, string issuerName, IssuerBundle issuer)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).UpdateCertificateIssuerAsync(vault, issuerName, issuer), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='issuer'>
            /// The issuer bundle.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> UpdateCertificateIssuerAsync(this IKeyVaultClient operations, string vault, string issuerName, IssuerBundle issuer, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateIssuerWithHttpMessagesAsync(vault, issuerName, issuer, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            public static IssuerBundle GetCertificateIssuer(this IKeyVaultClient operations, string vault, string issuerName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificateIssuerAsync(vault, issuerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> GetCertificateIssuerAsync(this IKeyVaultClient operations, string vault, string issuerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuerWithHttpMessagesAsync(vault, issuerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            public static IssuerBundle DeleteCertificateIssuer(this IKeyVaultClient operations, string vault, string issuerName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).DeleteCertificateIssuerAsync(vault, issuerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified certificate issuer.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> DeleteCertificateIssuerAsync(this IKeyVaultClient operations, string vault, string issuerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateIssuerWithHttpMessagesAsync(vault, issuerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new certificate version. If this is the first version, the
            /// certificate resource is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional)
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            public static CertificateOperation CreateCertificate(this IKeyVaultClient operations, string vault, string certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).CreateCertificateAsync(vault, certificateName, certificatePolicy, certificateAttributes, tags), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new certificate version. If this is the first version, the
            /// certificate resource is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional)
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> CreateCertificateAsync(this IKeyVaultClient operations, string vault, string certificateName, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificateWithHttpMessagesAsync(vault, certificateName, certificatePolicy, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imports a certificate into the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='base64EncodedCertificate'>
            /// Base64 encoded representaion of the certificate object to import. This
            /// certificate needs to contain the private key.
            /// </param>
            /// <param name='password'>
            /// If the private key in base64EncodedCertificate is encrypted, the password
            /// used for encryption
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional)
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            public static CertificateBundle ImportCertificate(this IKeyVaultClient operations, string vault, string certificateName, string base64EncodedCertificate, string password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).ImportCertificateAsync(vault, certificateName, base64EncodedCertificate, password, certificatePolicy, certificateAttributes, tags), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Imports a certificate into the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='base64EncodedCertificate'>
            /// Base64 encoded representaion of the certificate object to import. This
            /// certificate needs to contain the private key.
            /// </param>
            /// <param name='password'>
            /// If the private key in base64EncodedCertificate is encrypted, the password
            /// used for encryption
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional)
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> ImportCertificateAsync(this IKeyVaultClient operations, string vault, string certificateName, string base64EncodedCertificate, string password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportCertificateWithHttpMessagesAsync(vault, certificateName, base64EncodedCertificate, password, certificatePolicy, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            public static IPage<CertificateItem> GetCertificateVersions(this IKeyVaultClient operations, string vault, string certificateName, int? maxresults = default(int?))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificateVersionsAsync(vault, certificateName, maxresults), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the versions of a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificateVersionsAsync(this IKeyVaultClient operations, string vault, string certificateName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateVersionsWithHttpMessagesAsync(vault, certificateName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the policy for a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault.
            /// </param>
            public static CertificatePolicy GetCertificatePolicy(this IKeyVaultClient operations, string vault, string certificateName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificatePolicyAsync(vault, certificateName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the policy for a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificatePolicy> GetCertificatePolicyAsync(this IKeyVaultClient operations, string vault, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatePolicyWithHttpMessagesAsync(vault, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the policy for a certificate. Set appropriate members in the
            /// certificatePolicy that must be updated. Leave others as null.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The policy for the certificate.
            /// </param>
            public static CertificatePolicy UpdateCertificatePolicy(this IKeyVaultClient operations, string vault, string certificateName, CertificatePolicy certificatePolicy)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).UpdateCertificatePolicyAsync(vault, certificateName, certificatePolicy), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the policy for a certificate. Set appropriate members in the
            /// certificatePolicy that must be updated. Leave others as null.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The policy for the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificatePolicy> UpdateCertificatePolicyAsync(this IKeyVaultClient operations, string vault, string certificateName, CertificatePolicy certificatePolicy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificatePolicyWithHttpMessagesAsync(vault, certificateName, certificatePolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the attributes associated with the specified certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault
            /// </param>
            /// <param name='certificateVersion'>
            /// The version of the certificate
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional)
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            public static CertificateBundle UpdateCertificate(this IKeyVaultClient operations, string vault, string certificateName, string certificateVersion, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).UpdateCertificateAsync(vault, certificateName, certificateVersion, certificateAttributes, tags), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the attributes associated with the specified certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault
            /// </param>
            /// <param name='certificateVersion'>
            /// The version of the certificate
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional)
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> UpdateCertificateAsync(this IKeyVaultClient operations, string vault, string certificateName, string certificateVersion, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateWithHttpMessagesAsync(vault, certificateName, certificateVersion, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault
            /// </param>
            /// <param name='certificateVersion'>
            /// The version of the certificate
            /// </param>
            public static CertificateBundle GetCertificate(this IKeyVaultClient operations, string vault, string certificateName, string certificateVersion)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificateAsync(vault, certificateName, certificateVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault
            /// </param>
            /// <param name='certificateVersion'>
            /// The version of the certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> GetCertificateAsync(this IKeyVaultClient operations, string vault, string certificateName, string certificateVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateWithHttpMessagesAsync(vault, certificateName, certificateVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a certificate operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='certificateOperation'>
            /// The certificate operation response.
            /// </param>
            public static CertificateOperation UpdateCertificateOperation(this IKeyVaultClient operations, string vault, string certificateName, CertificateOperation certificateOperation)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).UpdateCertificateOperationAsync(vault, certificateName, certificateOperation), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a certificate operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='certificateOperation'>
            /// The certificate operation response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> UpdateCertificateOperationAsync(this IKeyVaultClient operations, string vault, string certificateName, CertificateOperation certificateOperation, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateOperationWithHttpMessagesAsync(vault, certificateName, certificateOperation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the certificate operation response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            public static CertificateOperation GetCertificateOperation(this IKeyVaultClient operations, string vault, string certificateName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificateOperationAsync(vault, certificateName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the certificate operation response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> GetCertificateOperationAsync(this IKeyVaultClient operations, string vault, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateOperationWithHttpMessagesAsync(vault, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the certificate operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            public static CertificateOperation DeleteCertificateOperation(this IKeyVaultClient operations, string vault, string certificateName)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).DeleteCertificateOperationAsync(vault, certificateName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the certificate operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> DeleteCertificateOperationAsync(this IKeyVaultClient operations, string vault, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateOperationWithHttpMessagesAsync(vault, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Merges a certificate or a certificate chain with a key pair existing on
            /// the server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='x509Certificates'>
            /// The certificate or the certificte chain to merge
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional)
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            public static CertificateBundle MergeCertificate(this IKeyVaultClient operations, string vault, string certificateName, IList<byte[]> x509Certificates, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).MergeCertificateAsync(vault, certificateName, x509Certificates, certificateAttributes, tags), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Merges a certificate or a certificate chain with a key pair existing on
            /// the server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vault'>
            /// The vault name, e.g. https://myvault.vault.azure.net
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='x509Certificates'>
            /// The certificate or the certificte chain to merge
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional)
            /// </param>
            /// <param name='tags'>
            /// Application-specific metadata in the form of key-value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> MergeCertificateAsync(this IKeyVaultClient operations, string vault, string certificateName, IList<byte[]> x509Certificates, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MergeCertificateWithHttpMessagesAsync(vault, certificateName, x509Certificates, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<KeyItem> GetKeyVersionsNext(this IKeyVaultClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetKeyVersionsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the versions of the specified key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeyVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<KeyItem> GetKeysNext(this IKeyVaultClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetKeysNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List keys in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeysNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List secrets in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SecretItem> GetSecretsNext(this IKeyVaultClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetSecretsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List secrets in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of the specified secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SecretItem> GetSecretVersionsNext(this IKeyVaultClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetSecretVersionsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the versions of the specified secret
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificates in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CertificateItem> GetCertificatesNext(this IKeyVaultClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificatesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List certificates in the specified vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificatesNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificate issuers for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CertificateIssuerItem> GetCertificateIssuersNext(this IKeyVaultClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificateIssuersNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List certificate issuers for the specified vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateIssuerItem>> GetCertificateIssuersNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CertificateItem> GetCertificateVersionsNext(this IKeyVaultClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IKeyVaultClient)s).GetCertificateVersionsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the versions of a certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificateVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
