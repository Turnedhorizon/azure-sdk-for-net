// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    public partial class CertificateBundle
    {
        /// <summary>
        /// Initializes a new instance of the CertificateBundle class.
        /// </summary>
        public CertificateBundle() { }

        /// <summary>
        /// Initializes a new instance of the CertificateBundle class.
        /// </summary>
        public CertificateBundle(string id = default(string), string kid = default(string), string sid = default(string), byte[] x5t = default(byte[]), CertificatePolicy policy = default(CertificatePolicy), byte[] cer = default(byte[]), string contentType = default(string), CertificateAttributes attributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Id = id;
            Kid = kid;
            Sid = sid;
            X5t = x5t;
            Policy = policy;
            Cer = cer;
            ContentType = contentType;
            Attributes = attributes;
            Tags = tags;
        }

        /// <summary>
        /// Gets the certificate id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the key id
        /// </summary>
        [JsonProperty(PropertyName = "kid")]
        public string Kid { get; private set; }

        /// <summary>
        /// Gets the secret id
        /// </summary>
        [JsonProperty(PropertyName = "sid")]
        public string Sid { get; private set; }

        /// <summary>
        /// Gets thumbprint of the certificate.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "x5t")]
        public byte[] X5t { get; private set; }

        /// <summary>
        /// Gets the management policy.
        /// </summary>
        [JsonProperty(PropertyName = "policy")]
        public CertificatePolicy Policy { get; private set; }

        /// <summary>
        /// Gets or sets  CER contents of x509 certificate.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "cer")]
        public byte[] Cer { get; set; }

        /// <summary>
        /// Gets or sets the content type of the secret
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or sets the certificate attributes.
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Gets or sets application-specific metadata in the form of
        /// key-value pairs
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
