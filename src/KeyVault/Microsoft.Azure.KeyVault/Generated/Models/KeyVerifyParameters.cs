// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    public partial class KeyVerifyParameters
    {
        /// <summary>
        /// Initializes a new instance of the KeyVerifyParameters class.
        /// </summary>
        public KeyVerifyParameters() { }

        /// <summary>
        /// Initializes a new instance of the KeyVerifyParameters class.
        /// </summary>
        public KeyVerifyParameters(string algorithm, byte[] digest, byte[] signature)
        {
            Algorithm = algorithm;
            Digest = digest;
            Signature = signature;
        }

        /// <summary>
        /// The signing/verification algorithm. For more information on
        /// possible algorithm types, see JsonWebKeySignatureAlgorithm.
        /// </summary>
        [JsonProperty(PropertyName = "alg")]
        public string Algorithm { get; set; }

        /// <summary>
        /// The digest used for signing
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "digest")]
        public byte[] Digest { get; set; }

        /// <summary>
        /// The signature to be verified
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "value")]
        public byte[] Signature { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Algorithm == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Algorithm");
            }
            if (Digest == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Digest");
            }
            if (Signature == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Signature");
            }
            if (this.Algorithm != null)
            {
                if (this.Algorithm.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Algorithm", 1);
                }
            }
        }
    }
}
