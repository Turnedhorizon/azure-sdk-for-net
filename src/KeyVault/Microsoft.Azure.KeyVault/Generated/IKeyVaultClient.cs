// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.KeyVault
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Client class to perform cryptographic key operations and vault
    /// operations against the Key Vault service.
    /// </summary>
    public partial interface IKeyVaultClient : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Gets Azure subscription credentials.
        /// </summary>
        ServiceClientCredentials Credentials { get; }

        /// <summary>
        /// Client Api Version.
        /// </summary>
        string ApiVersion { get; }

        /// <summary>
        /// Gets or sets the preferred language for the response.
        /// </summary>
        string AcceptLanguage { get; set; }

        /// <summary>
        /// Gets or sets the retry timeout in seconds for Long Running
        /// Operations. Default value is 30.
        /// </summary>
        int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// When set to true a unique x-ms-client-request-id value is
        /// generated and included in each request. Default is true.
        /// </summary>
        bool? GenerateClientRequestId { get; set; }


            /// <summary>
        /// Creates a new, named, key in the specified vault.
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='kty'>
        /// The type of key to create. For valid key types, see WebKeyTypes.
        /// </param>
        /// <param name='keySize'>
        /// Size of the key
        /// </param>
        /// <param name='keyOps'>
        /// </param>
        /// <param name='keyAttributes'>
        /// </param>
        /// <param name='tags'>
        /// Application-specific metadata in the form of key-value pairs
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> CreateKeyWithHttpMessagesAsync(string vault, string keyName, string kty, int? keySize = default(int?), IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports a key into the specified vault
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='hsm'>
        /// Whether to import as a hardware key (HSM) or software key
        /// </param>
        /// <param name='key'>
        /// The Json web key
        /// </param>
        /// <param name='keyAttributes'>
        /// The key management attributes
        /// </param>
        /// <param name='tags'>
        /// Application-specific metadata in the form of key-value pairs
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> ImportKeyWithHttpMessagesAsync(string vault, string keyName, bool? hsm = default(bool?), JsonWebKey key = default(JsonWebKey), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified key
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> DeleteKeyWithHttpMessagesAsync(string vault, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the Key Attributes associated with the specified key
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key
        /// </param>
        /// <param name='keyOps'>
        /// Json web key operations. For more information on possible key
        /// operations, see JsonWebKeyOperation.
        /// </param>
        /// <param name='keyAttributes'>
        /// </param>
        /// <param name='tags'>
        /// Application-specific metadata in the form of key-value pairs
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> UpdateKeyWithHttpMessagesAsync(string vault, string keyName, string keyVersion, IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves the public portion of a key plus its attributes
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> GetKeyWithHttpMessagesAsync(string vault, string keyName, string keyVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of the specified key
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeyVersionsWithHttpMessagesAsync(string vault, string keyName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List keys in the specified vault
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeysWithHttpMessagesAsync(string vault, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requests that a backup of the specified key be downloaded to the
        /// client.
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<BackupKeyResult>> BackupKeyWithHttpMessagesAsync(string vault, string keyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restores the backup key in to a vault
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyBundleBackup'>
        /// the backup blob associated with a key bundle
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyBundle>> RestoreKeyWithHttpMessagesAsync(string vault, byte[] keyBundleBackup, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Encrypts a single block of data. The amount of data that may be
        /// encrypted is determined
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> EncryptWithHttpMessagesAsync(string vault, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Decrypts a single block of encrypted data
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> DecryptWithHttpMessagesAsync(string vault, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a signature from a digest using the specified key in the
        /// vault
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> SignWithHttpMessagesAsync(string vault, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verifies a signature using the specified key
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key
        /// </param>
        /// <param name='algorithm'>
        /// The signing/verification algorithm. For more information on
        /// possible algorithm types, see JsonWebKeySignatureAlgorithm.
        /// </param>
        /// <param name='digest'>
        /// The digest used for signing
        /// </param>
        /// <param name='signature'>
        /// The signature to be verified
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyVerifyResult>> VerifyWithHttpMessagesAsync(string vault, string keyName, string keyVersion, string algorithm, byte[] digest, byte[] signature, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Wraps a symmetric key using the specified key
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> WrapKeyWithHttpMessagesAsync(string vault, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unwraps a symmetric key using the specified key in the vault that
        /// has initially been used for wrapping the key.
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='keyName'>
        /// The name of the key
        /// </param>
        /// <param name='keyVersion'>
        /// The version of the key
        /// </param>
        /// <param name='algorithm'>
        /// algorithm identifier
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<KeyOperationResult>> UnwrapKeyWithHttpMessagesAsync(string vault, string keyName, string keyVersion, string algorithm, byte[] value, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sets a secret in the specified vault.
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret in the given vault
        /// </param>
        /// <param name='value'>
        /// The value of the secret
        /// </param>
        /// <param name='tags'>
        /// Application-specific metadata in the form of key-value pairs
        /// </param>
        /// <param name='contentType'>
        /// Type of the secret value such as a password
        /// </param>
        /// <param name='secretAttributes'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> SetSecretWithHttpMessagesAsync(string vault, string secretName, string value, IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a secret from the specified vault.
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret in the given vault
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> DeleteSecretWithHttpMessagesAsync(string vault, string secretName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the attributes associated with the specified secret
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret in the given vault
        /// </param>
        /// <param name='secretVersion'>
        /// The version of the secret
        /// </param>
        /// <param name='contentType'>
        /// Type of the secret value such as a password
        /// </param>
        /// <param name='secretAttributes'>
        /// </param>
        /// <param name='tags'>
        /// Application-specific metadata in the form of key-value pairs
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> UpdateSecretWithHttpMessagesAsync(string vault, string secretName, string secretVersion, string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a secret.
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret in the given vault
        /// </param>
        /// <param name='secretVersion'>
        /// The version of the secret
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<SecretBundle>> GetSecretWithHttpMessagesAsync(string vault, string secretName, string secretVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List secrets in the specified vault
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of secrets to return.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretsWithHttpMessagesAsync(string vault, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of the specified secret
        /// </summary>
        /// <param name='vault'>
        /// The vault name, e.g. https://myvault.vault.azure.net
        /// </param>
        /// <param name='secretName'>
        /// The name of the secret in the given vault
        /// </param>
        /// <param name='maxresults'>
        /// Maximum number of results to return.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretVersionsWithHttpMessagesAsync(string vault, string secretName, int? maxresults = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of the specified key
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeyVersionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List keys in the specified vault
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<KeyItem>>> GetKeysNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List secrets in the specified vault
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the versions of the specified secret
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<SecretItem>>> GetSecretVersionsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
